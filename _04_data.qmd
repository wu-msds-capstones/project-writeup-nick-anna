# Data

We decided to store our data in 3NF, and as such, assigned unique ID numbers to each show and streaming platform in the ratings. The most time consuming and tedious part of the project was in getting all of the show titles in a consistent format so that we could assign them all IDs. Many shows were listed in multiple different ways in the various ratings; for example, the Netflix show *Formula 1: Drive to Survive* was in the datasets as ‘Formula 1: Drive to Survive’, ‘FORMULA 1: DRIVE SURVIVE’, and ‘Formula One: Drive...’. This was true for many of the shows in the various datasets, so in order to ensure consistency for joining purposes, we went through the datasets and set each show name to a consistent format. This ended up being a pretty considerable effort, taking a few days’ worth of work to complete. But once we were finished, we were able to easily and consistently join our datasets together and change the show names to show ids.

The way that we structured our database tables is shown in the Entity Relationship Diagram of **Figure 1**.

[![ERD](images/erd.png){width="780"}](images/erd.png)\
***Figure 1**: ERD of Database Design and Structure*

## Data Dictionary

### Table 1: shows

| Column Name        | Description                           | Data Type | Example        |
|--------------------|---------------------------------------|-----------|----------------|
| `id`               | Unique identifier for the TV show     | Integer   | 28             |
| `name`             | Name of the show                      | Text      | JuryDuty       |
| `platform_id`      | Unique identifier for the streaming platform  | Integer    | 1     |
| `tv_or_movie`      | Whether the content was a TV show or movie | Text | TV             |
| `genre`            | Genre of the show                     | Text      | Mockumentary   |
| `miniseries`       | Whether it was a miniseries or not    | Text      | N              |
| `foreign_language` | Whether it was in a foreign language or not | Text | N             | 
| `original_content` | Whether it was original content or not  | Boolean | Y              | 
| `notes`            | Any notes                             | Text      | Freevee        |

### Table 2: gtrends

| Column Name        | Description                           | Data Type | Example        |
|--------------------|---------------------------------------|-----------|----------------|
| `show_id`          | Unique identifier for the TV show     | Integer   | 28             |
| `date`             | Date of the pulled Google Trends number | Date    | 2023-05-07     |
| `rating`           | Google Trends rating (0-100)          | Integer   | 73             |

### Table 3: nielsenratings

| Column Name        | Description                           | Data Type | Example        |
|--------------------|---------------------------------------|-----------|----------------|
| `date`             | Date of the rating                    | Date      | 2021-09-26     |
| `show_id`          | Unique identifier for the TV show     | Integer   | 108            |
| `rank`             | Rank for that week (1-10)             | Text      | 5              |
| `episode_count`    | Number of episodes at the time of the rating  | Integer    | 20    |
| `minutes_watched`  | Total minutes viewed by persons 2+    | Text      | 311000000      |
| `platform_id`      | Unique identifier for the streaming platform | Integer | 2         |

### Table 4: reaperratings

| Column Name        | Description                           | Data Type | Example        |
|--------------------|---------------------------------------|-----------|----------------|
| `date`             | Date of the rating                    | Date      | 2023-11-19     |
| `show_id`          | Unique identifier for the TV show     | Integer   | 108            |
| `rank`             | Rank for that week (1-10)             | Text      | 4              |
| `platform_id`      | Unique identifier for the streaming platform | Integer | 2         |
| `runtime`          | Runtime of the show at the time of the rating | Integer | 1471     |
| `episode_count`    | Number of episodes at the time of the rating  | Integer    | 34    |
| `minutes_watched`  | Total minutes viewed by persons 2+    | Text      | 150000000      |

### Table 5: yearlyratings

| Column Name        | Description                           | Data Type | Example        |
|--------------------|---------------------------------------|-----------|----------------|
| `year`             | Year of the rating                    | Integer   | 2022           |
| `show_id`          | Unique identifier for the TV show     | Integer   | 108            |
| `rank`             | Rank for that week (1-10)             | Integer   | 1              |
| `platform_id`      | Unique identifier for the streaming platform | Integer | 2         |
| `rating_value_score` | Score calculated based on daily position in chart  | Integer | 307 |

### Table 6: netflixtop10

| Column Name        | Description                           | Data Type | Example        |
|--------------------|---------------------------------------|-----------|----------------|
| `show_id`          | Unique identifier for the TV show     | Integer   | 567            |
| `date`             | Date of the rating                    | Integer   | 2021-07-18     |
| `rank`             | Rank for that week (1-10)             | Integer   | 3              |
| `weeks_in_top10`   | Weeks the title has been in top 10    | Integer   | 1              |
| `season_title`     | Name of the season                    | Text      | Never Have I Ever: Season 2 |

### Table 7: release_info

| Column Name        | Description                           | Data Type | Example        |
|--------------------|---------------------------------------|-----------|----------------|
| `show_id`          | Unique identifier for the TV show     | Integer   | 28             |
| `release_schedule` | Release schedule of the show          | Text      | first four episodes at once, then batches       |
| `season_number`    | Season of the show                    | Integer   | 1              |
| `binned_release`   | Binned release schedule               | Text | hybrid              |

### Table 8: binned_genres

| Column Name        | Description                           | Data Type | Example        |
|--------------------|---------------------------------------|-----------|----------------|
| `show_id`          | Unique identifier for the TV show     | Integer   | 567            |
| `binned_genre`     | Binned genre                          | Text      | comedy         |

### Table 9: platforms

| Column Name        | Description                           | Data Type | Example        |
|--------------------|---------------------------------------|-----------|----------------|
| `id`               | Unique identifier for the streaming platform | Integer | 1         |
| `platform_name`    | Name of the streaming platform        | Text      | Amazon Prime   |

We use the show_id as our main connecting piece, allowing us to connect our shows table with the various ratings tables, the gtrends table (containing Google Trends data), and the releaseinfo and binned_genres tables.

Instead of having unique Primary Keys for each table, we primarily use compound keys as unique identifiers for each of our tables. Only the shows and platforms tables have single value primary keys. Every other table has a compound primary key. The compound keys were chosen to have a unique identifier that we could use to identify each row. For example, the netflixtop10 table’s compound key consists of the show_id, date, and season_title. This is because Netflix’s Top 10 data breaks down a show by season, so a single show could appear on the same week’s top 10 list multiple times. An example of this is *Bridgerton*. The Netflix Top 10 list for the week of June 6, 2024 contains *Bridgerton* Season 3, *Bridgerton* Season 2, and *Bridgerton* Season 1. As such, a compound key of just the show_id and date would not create a unique compound key. Therefore, season_title was also included to differentiate between the different seasons of a show.

The season_number was included in the compound key of the releaseinfo table for similar reasons; as the release schedule for a show can change over the lifetime of the show, we needed to include the season_number to the compound key alongside the show_id to ensure that each row had a unique identifier.

Most of the other tables such as gtrends, reaperratings, yearlyratings, and nielsenratings use a compound key of just the date and show_id as they do not differentiate between seasons, and therefore each show would have at maximum one data point per week, making our compound keys unique for these tables.

The binned_genres table required including both the show_id and the binned_genre as part of the compound key. This is due to the fact that, as mentioned in the **Show Genre** section, there are a small number of shows whose genre listed both ‘comedy’ and ‘drama’, and as such, we classified them as both. Therefore, within the binned_genres table, there are a few show_ids that are repeated, so we must additionally include the binned_genre column in our compound key to ensure that each row is unique.